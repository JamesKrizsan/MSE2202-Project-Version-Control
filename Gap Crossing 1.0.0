#include <ESP32Servo.h>
#include <analogWrite.h>
#include <ESP32Tone.h>
#include <ESP32PWM.h>

#include <Adafruit_NeoPixel.h>

#define trigF 5 
#define echoF 4 
#define trigB 7
#define echoB 6

Servo myservo;  
Adafruit_NeoPixel SmartLEDs(1, 21, NEO_RGB + NEO_KHZ800);
const int stepsPerRevolution = 2038;
int pos;
int duration;
int distance;
int step = 1;
int LEDstep = 0;

void setup() {
  pos = 0;
  myservo.attach(15); //servo 
  myservo.write(pos); // start servo in up position (all the way down is 180)

  pinMode(0, INPUT); //button
//pins from left to right
  pinMode(21, OUTPUT); //left forwards (yellow, top of driver)
  pinMode(47, OUTPUT); //left backwards (light orange)
  pinMode(48, OUTPUT); //right forwards (dark orange)
  pinMode(45, OUTPUT); //right backwards (black, bottom of driver 1)
  pinMode(35, OUTPUT); //rear arm extend (red, own driver)
  pinMode(36, OUTPUT); //rear arm retract (brown)
  pinMode(37, OUTPUT); //track forwards (green, top of driver)
  pinMode(38, OUTPUT); //track backwards (yellow)
  pinMode(39, OUTPUT); //front arm extend (red)
  pinMode(40, OUTPUT); //front arm retract (brown, bottom of driver 2)
  pinMode(41, OUTPUT); //
  pinMode(42, OUTPUT); //
  pinMode(2, OUTPUT);  //.
  pinMode(1, OUTPUT);  //
  pinMode(trigF, OUTPUT); //orange 5
  pinMode(echoF, INPUT);  //yellow 4
  pinMode(trigB, OUTPUT); // 7
  pinMode(echoB, INPUT);  // 6
}

void loop() {
  
  switch(step){ //*** = not finished yet

    //***button start
    case 0:
      delay(100);
      if (digitalRead(0) == HIGH) {
      step = 1;
      }
    break;

    //move to edge and stop - GOOD
    case 1:    
      Serial.println("step 1 forwards");
      // Clears the trigPin
      digitalWrite(trigF, LOW);
      delayMicroseconds(2);
      // Sets the trigPin on HIGH state for 10 micro seconds
      digitalWrite(trigF, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigF, LOW);
      // Reads the echoPin, returns the sound wave travel time in microseconds
      duration = pulseIn(echoF, HIGH);
      // Calculating the distance
      distance= duration*0.034/2;
      Serial.println(distance);

      digitalWrite(21, HIGH);
      digitalWrite(48, HIGH);

      if (distance >= 10){
        digitalWrite(21, LOW);
        digitalWrite(48, LOW);
        step = 2;
      }
    break;

    //extend front arm - GOOD
    case 2:
      Serial.println("step 2 extend front");
      digitalWrite(39, HIGH);
      delay(2800); //5000 full
      digitalWrite(39, LOW);
      step = 3;
    break;

    //rotate front arm to table - GOOD
    case 3:
    Serial.println("step 3 rotate arm");
      for (pos; pos <= 180; pos += 1) {
        // in steps of 1 degree
        myservo.write(pos);              
        delay(15);                
      }
      step = 4;
    break;

    //extend back wheels - GOOD
    case 4:
      Serial.println("step 4 extend back (need far distance from back sensor for next step)");
      digitalWrite(35, HIGH);
      delay(6000); //8000
      digitalWrite(35, LOW);
      step = 5;
    break;

    //front arm pull forwards - GOOD
    case 5:
      Serial.println("step 5 front arm pull");
      digitalWrite(trigB, LOW);
      delayMicroseconds(2);
      // Sets the trigPin on HIGH state for 10 micro seconds
      digitalWrite(trigB, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigB, LOW);
      // Reads the echoPin, returns the sound wave travel time in microseconds
      duration = pulseIn(echoB, HIGH);
      // Calculating the distance
      distance= duration*0.034/2;
      Serial.println(distance);

      //arm
      digitalWrite(37, HIGH);
      //drive
      delay(2000);
      digitalWrite(21, HIGH);
      digitalWrite(48, HIGH);
      delay(5000);

      //if(distance <= 3){
        digitalWrite(37, LOW);
        digitalWrite(21, LOW);
        digitalWrite(48, LOW);
        step = 6;
       //}
    break;

    //pull back wheels up  - GOOD     
    case 6:
      Serial.println("step 6 back wheels up");
      digitalWrite(36, HIGH);
      delay(6000);
      digitalWrite(36, LOW);
        
        //move forwards a bit
        digitalWrite(21, HIGH);
        digitalWrite(48, HIGH);
        digitalWrite(37, HIGH);
        delay(5000);
        digitalWrite(37, LOW);
        digitalWrite(21, LOW);
        digitalWrite(48, LOW);

      step = 7;
    break;

    //retract front arm - GOOD (might need retime);
    case 7:
      Serial.println("step 7 front arm retract");
      digitalWrite(40, HIGH);
      delay(2800);
      digitalWrite(40, LOW);
      step = 8;
    break;

    //arm rotate back to stating position - GOOD
    case 8:
    Serial.println("step 8 rotate arm back");
      for (pos; pos >= 10; pos -= 1) {
        // in steps of 1 degree
        myservo.write(pos);              
        delay(22);                
      }
      step = 9;
    break;

    //drive forwards till edge - GOOD
    case 9:
      Serial.println("step 9 forwards");
      digitalWrite(trigF, LOW);
      delayMicroseconds(2);
      // Sets the trigPin on HIGH state for 10 micro seconds
      digitalWrite(trigF, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigF, LOW);
      // Reads the echoPin, returns the sound wave travel time in microseconds
      duration = pulseIn(echoF, HIGH);
      // Calculating the distance
      distance= duration*0.034/2;
      Serial.println(distance);

        digitalWrite(21, HIGH);
        digitalWrite(48, HIGH);

      if (distance >= 10){
        digitalWrite(21, LOW);
        digitalWrite(48, LOW);
        step = 10;
      }
    break;

    //***drive backwards
    case 10:
      Serial.println("step 10 back");
      digitalWrite(47, HIGH);
      digitalWrite(45, HIGH);
      delay(2500); //need to time, this is placeholder for testing
      digitalWrite(47, LOW);
      digitalWrite(45, LOW);
      step = 11;
    break;

    //flash led - GOOD
    case 11:
      Serial.println("step 11 lights");
      switch(LEDstep)
        {
          case 0:
          {
            
            // SmartLEDs.setPixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(255,0,0));  // Red
            SmartLEDs.show();
            delay(500);            
            LEDstep = 1;
            break;
          }
          case 1:
          {
            
            // SmartLEDs.setPixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(255,127,0));  // orange
            SmartLEDs.show();
            delay(500);
            LEDstep = 2;
            break;
          }
          case 2:
          {
            
            // SmartLEDs.setPixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(255,255,0));  // yellow
            SmartLEDs.show();
            delay(500);
            LEDstep = 3;
            break;
          }
          case 3:
          {
            // SmartLEDs.setPixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(0,255,0));  // green
            SmartLEDs.show();
            delay(500);
            LEDstep = 4;
            break;
          }
          case 4:
          {
            // SmartLEDs.set PixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(0,0,255)); //blue
            SmartLEDs.show();
            delay(500);
            LEDstep = 5;
            break;
          }
          case 5:
          {
            // SmartLEDs.set PixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(127,0,255)); //purple
            SmartLEDs.show();
            delay(500);
            LEDstep = 6;
            break;
          }
          case 6:
          {
            // SmartLEDs.set PixelColor() takes RGB values, from 0,0,0 up to 255,255,255
            SmartLEDs.setPixelColor(0,SmartLEDs.Color(0,0,0)); //off
            SmartLEDs.show();
            break;
          }
        }
    break;
  }
  
}